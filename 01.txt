############################################################
## PREPARACIÓN DE MÁQUINAS E INSTALACIÓN DE DOCKER Y K8S: ##
############################################################

OBS: Antes de iniciar, en base a los recursos de las máquinas, se debe identificar que tipo de nodo será cada una (master, worker Mngt, worker Gw, worker Ingress)

0) Trabajar con usaurio root o, en su defecto, crear el siguiente usuario con permisos de root:

	# sudo useradd -u 0 -o -g 0 menta
	# sudo passwd menta (asignar M2nt1.123)

	user: menta
	pass: M2nt1.123

1) Cambiar hostname en cada host con el valor respectivo o verificar que el nombre esté bien asignado (Los hostname de las máquinas los define SUNAT):
	
	hostnamectl set-hostname master01.apic.sunat.peru (ejemplo para master01)
	hostnamectl set-hostname worker01.apic.sunat.peru (ejemplo para worker01)

    En /etc/sysconfig/network agregar
    HOSTNAME=master01.apic.sunat.peru

    reboot

2) Registrar RHEL8  para utilizar yum/dnf (esto debe estar realizado por SUNAT previo a la entrega de las máquinas):

	sudo subscription-manager remove --all
	sudo subscription-manager unregister
	sudo subscription-manager clean
	sudo subscription-manager register
		ingresar usuario de SUNAT en RedHat y su password
	sudo subscription-manager refresh
	sudo subscription-manager attach --auto
	subscription-manager repos --list

3) dnf -y upgrade --nobest

4) Disable SELinux enforcement.

    setenforce 0
    sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

5) Habilite el enmascaramiento transparente y facilite el tráfico de Virtual Extensible LAN (VxLAN) para la comunicación entre los pods de Kubernetes en todo el clúster.

    modprobe br_netfilter

También deberá habilitar el enmascaramiento de IP en el firewall:

    firewall-cmd --add-masquerade --permanent
    firewall-cmd --reload

6) Set bridged packets to traverse iptables rules.

cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

    sysctl --system

7) Deshabilite la memoria swaps para incrementar la performance:

    swapoff -a

    Con el siguiente comando, comente la línea asociada a la memoria swap en el archivo /etc/fstab para deshabilitar permanentemente:
	sed -i '/ swap / s/^/#/' /etc/fstab
	
	Si no funciona, comente la línea respectiva manualmente.

8) Agregar al fichero /etc/hosts los nombres e IP de cada host:

	# APIC Kubernetes
	IP master01 master01.apic.sunat.peru
	IP master02 master02.apic.sunat.peru
	IP master03 master03.apic.sunat.peru
	IP minion01 minion01.apic.sunat.peru
	IP minion02 minion02.apic.sunat.peru
	IP minion03 minion03.apic.sunat.peru
	IP minion04 minion04.apic.sunat.peru
	IP minion05 minion05.apic.sunat.peru
	IP minion06 minion06.apic.sunat.peru
	IP minion07 minion07.apic.sunat.peru
	... (todas las máquinas del clúster)

9) Instalar ntp:

    dnf install chrony --nobest -y
    systemctl start chronyd
    systemctl enable chronyd
    systemctl status chronyd

    Cambiar los servidores ntp por los del cliente en /etc/chrony.conf

    systemctl restart chronyd
    chronyc sources


10) Add the repository for the docker installation package.

    dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

11) Install container.io which is not yet provided by the package manager before installing docker.

    dnf install https://download.docker.com/linux/centos/8/x86_64/stable/Packages/containerd.io-1.4.3-3.1.el8.x86_64.rpm --allowerasing --nobest

12) Then install Docker from the repositories.

    dnf install docker-ce --nobest -y
	usermod -aG docker your-user
	
13) Start the docker service:

    systemctl start docker

14) Make it also start automatically on server restart.

    systemctl enable docker

    Ahora compruebe que funciona correctamente.

15) Consulte la versión de docker

    docker version

16) Liste las imagenes de docker (probablemente aún esté vacío el repositorio)

    docker images
    REPOSITORY   TAG   IMAGE ID   CREATED   SIZE

Ahora que Docker está listo, continúe a continuación para instalar Kubernetes.

17) Agregue el repositorio de Kubernetes a su administrador de paquetes creando el siguiente archivo:

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

18) Luego actualice la información del repositorio:

    dnf upgrade -y --allowerasing --nobest

19) Deshabilitar y detener el firewall (Omitir)

    systemctl disable firewalld
    systemctl stop firewalld

20) Instale todos los componentes necesarios para Kubernetes.

    dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes --nobest

21) Inicie los servicios de Kubernetes y habilítelos para que se ejecuten al inicio:

    systemctl enable kubelet
    systemctl start kubelet
    systemctl status kubelet

    OBS: Si Kubelet no inicia, siga el procedimiento del paso 100.


22) Cambiar cgroup de Docker (Docker y K8s deben estar en el mismo grupo de control)

    Agregar --exec-opt native.cgroupdriver=systemd en ExecStart para cambiar el cgroup de Docker, en el archivo:

    /usr/lib/systemd/system/docker.service

    Luego reinicie (Si no levanta reinicie la máquina):
    systemctl daemon-reload
    systemctl stop docker
    systemctl start docker
    systemctl enable docker
    systemctl status docker


    Ahora verifique con:

    [root@master01 yum.repos.d]# docker info | grep -i cgroup
    Cgroup Driver: systemd
    [root@worker07 yum.repos.d]#

    Luego añadimos k8s al cgroup:
    sed -i 's/cgroup-driver=systemd/cgroup-driver=systemd/g' /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

    y finalmente reiniciamos k8s:
    systemctl daemon-reload
    systemctl enable kubelet
    systemctl restart kubelet
    systemctl status kubelet
	
23) Verificar que la versión de docker y k8s sea la misma en todas las máquinas

	kubeadm version
	
24) Una vez que se ha instalado Kubernetes, debe configurarse para formar un clúster.

    Configure kubeadm (en todos los nodos):

		kubeadm config images pull

    Si da algún error, reinicie Docker y Kubelet:

		systemctl daemon-reload
		systemctl stop docker
		systemctl start docker
		systemctl enable docker
		systemctl status docker
		systemctl enable kubelet
		systemctl start kubelet
		systemctl status kubelet

		

 
---------------
100) Procedimiento si Kubelet no inicia:

Steps to solve were: 

100.1) check if you have files kubelet.service and 10-kubeadm.conf on the next paths:

    ls /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
    ls /usr/lib/systemd/system/kubelet.service

10-kubeadm.conf:

    more /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf 

# Note: This dropin only works with kubeadm and kubelet v1.11+
[Service]
Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
# This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
# This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
# the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
EnvironmentFile=-/etc/sysconfig/kubelet
ExecStart=
ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS

kubelet.service:

    more /usr/lib/systemd/system/kubelet.service

[Unit]
Description=Kubernetes Kubelet Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=docker.service
Requires=docker.service

[Service]
WorkingDirectory=/var/lib/kubelet
EnvironmentFile=-/etc/kubernetes/config
EnvironmentFile=-/etc/kubernetes/kubelet
ExecStart=/usr/bin/kubelet \
        $KUBE_LOGTOSTDERR \
        $KUBE_LOG_LEVEL \
        $KUBELET_API_SERVER \
        $KUBELET_ADDRESS \
        $KUBELET_PORT \
        $KUBELET_HOSTNAME \
        $KUBE_ALLOW_PRIV \
        $KUBELET_ARGS
Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target


100.2) Delete systemd unit for kubelet in /etc/systemd/system/

    rm -R /etc/systemd/system/kubelet.service.d (confirm "y" for each file)
    rm /etc/systemd/system/kubelet.service

100.3) Reload all systemd unit files, and recreate the entire dependency tree.

    systemctl daemon-reload

100.4) restart kubelet

    systemctl restart kubelet

The output of kubelet status then should contain:

  Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)
  Drop-In: /usr/lib/systemd/system/kubelet.service.d
           +-10-kubeadm.conf

100.5) Initialize a Kubernetes control-plane node:

    kubeadm reset
    systemctl daemon-reload
    kubeadm init --pod-network-cidr=172.17.0.1/16

    Note: You have one or more issue:

    `- There is no internet connection; so the kubelet can't pull the following control plane images:`

    Try to pull them manually:

    kubeadm config images pull

    You may need to upgrade kubeadm, kubelet, kebectl


100.6) 	Si con lo anterior no arranca, ejecute lo siguiente:
		Ejecute: #kubeadm reset
		Ejecute: #kubeadm init
		Ejecute lo siguiente para verificar que kubelet se activa: #systemctl status kubelet
		Ejecute: #kubeadm reset && rm -rf /etc/cni/net.d