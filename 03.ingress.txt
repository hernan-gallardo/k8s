############################################
## INSTALAR MULTIPLES INGRESS CONTROLLER: ##
############################################
Links:
	- https://medium.com/codex/setup-multiple-nginx-ingress-controllers-on-eks-clusters-4e4dc37f6974

OBS:	- En Producción habrá 3 Ingress Controller, uno por cada capa de exposición (Internet, Extranet, Red-Interna).  
		- En No-Producción habrá 3 Ingress Controller, uno por cada ambiente (Dev, QA, PreProd).  
		- Los Ingress Controller se deben instalar en workers especificos, por lo que se definirá la afinidad para ello.
		- Cada Ingress-Controller se creará en un namespace distinto. Los de la red interna y Dev estarán en el namespace genérico ingress-nginx.


1) Asignar etiquetas a los nodos:

	Aprovechamos de crear las etiquetas en todos los nodos de los clúster (no solo para los Ingress-Controller).

	El comando para asignar una etiqueta a un nodo es: 
	kubectl label nodes <node-name> <label-key>=<label-value>
	
	Ejemplo: kubectl label nodes worker01.apic.lab nodegroup-type=worker-ingress
		El resultado debe ser: node/worker01.apic.lab labeled

		OBS: Con el siguiente comando puede revisar las etiquetas de los nodos:
	
			kubectl get nodes --show-labels
		
			También puede usar "kubectl describe node 'nodename'" para ver la lista completa de etiquetas de un nodo.
			
			Para eliminar una etiqueta puede usar el comando: kubectl label node <nodename> <label-key>-
			
	
	1.1) Para producción se deben crear etiquetas para los siguientes <label-key> nodegroup-type:
		- ingress-dmz1-internet 	(3 workers)
		- ingress-dmz1-extranet 	(2 workers)
		- ingress-red-interna		(2 workers)
		- apic-dmz1-internet		(3 workers)
		- apic-dmz2-aplicaciones	(3 workers)
		- apic-dmz1-extranet		(3 workers)
		- apic-red-interna			(3 workers)
	
	1.2) Para no-producción se deben crear etiquetas para los siguientes <label-key> nodegroup-type:
		- ingress-dmz1-desarrollo 	(2 workers)
		- ingress-dmz1-calidad-qa 	(2 workers)
		- ingress-dmz1-calidad-pprod(2 workers)
		- apic-dmz1-desarrollo		(2 workers)
		- apic-dmz2-desarrollo		(2 workers)
		- apic-dmz1-calidad-qa		(2 workers)
		- apic-dmz1-calidad-pprod	(2 workers)

		
		
2) Instalar Ingress Nginx Controller

	Cada Ingress Controller debe tener la siguiente cantidad de instancias:
	- dmz1-internet 		(Prod - 3 instancias) 
	- dmz1-extranet			(Prod - 2 instancias)
	- red-interna			(Prod - 2 instancias)
	- dmz1-desarrollo		(No-Prod - 2 instancias)
	- dmz1-calidad-qa		(No-Prod - 2 instancias)
	- dmz1-calidad-pprod	(No-Prod - 2 instancias)
		

	2.1) Crear los IngressClass para posteriomente poder asociar los Ingress que cree con el respectivo Ingress Controller
	
		OBS: Los IngressClass siempre se deben crear antes de crear los Deployment, Servicios e Ingress de una aplicación.

	2.1.1) Cree los archivos IngressClass-<capa-exposición>.yaml de Red Interna y Desarrollo con el siguiente contenido:

apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx 	#nginx.org/ingress-controller

		(Será el IngressClass por defecto; No se asocia a un namespace)
  
  
	2.1.2) Cree los archivos IngressClass-<capa-exposición>.yaml de las otras capas de exposición y ambientes con el siguiente contenido:

apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx-<capa-exposición>
  #  annotations:
  #    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx 	#nginx.org/ingress-controller

		(Se comentan los "annotations"; No se asocia a un namespace; reemplazar <capa-exposición> por la respectiva)
		
	2.1.2) Cree los IngressClass con el siguiente comando (3 para Prod y 3 para NoProd):
	
		kubectl apply -f IngressClass-<capa-exposición>.yaml

		
		
	2.2) Descargar el archivo para instalar ingress-nginx (copiarlo al cliente o master01 si no se puede descargar directamente):

		wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.46.0/deploy/static/provider/baremetal/deploy.yaml

	2.3) Cambie el nombre al archivo deploy.yaml por deploy-ingress-nginx-<capa-exposición>.yaml 
		
		Ejemplo: mv deploy.yaml deploy-ingress-nginx-dmz1-internet.yaml (cree un archivo por cada capa de exposición)
		

	2.4) Cambie los namespace dentro del archivo por el namespace al cual asociará cada ingress:
		- ingress-nginx-red-interna			(Prod)
		- ingress-nginx-dmz1-internet 		(Prod)
		- ingress-nginx-dmz1-extranet 		(Prod)
		- ingress-nginx-dmz1-desarrollo 	(No-Prod)
		- ingress-nginx-dmz1-calidad-qa 	(No-Prod)
		- ingress-nginx-dmz1-calidad-pprod	(No-Prod)
	
		OBS: Para Red Interna en Producción y Desarrollo en No-Producción no cambie el namespace; mantenga el por defecto (ingress-nginx)
	
		Use la siguiente sintaxis: sed -i 's/texto-a-buscar/texto-a-reemplazar/g' "Fichero o directorio"
		Ejemplo: sed -i 's/namespace: ingress-nginx/namespace: ingress-nginx-dmz1-internet/g' "deploy-ingress-nginx-dmz1-internet.yaml"

	2.5) Cambie el nombre del manespace dentro de los archivos por el namespace respectivo.
		
		OBS: Para Red Interna en Producción y Desarrollo en No-Producción no cambie el namespace; mantenga el por defecto (ingress-nginx)
		
		En la línea 4 del archivo cambie "name: ingress-nginx" por "name: <namespace>"
		Ejemplo: "name: ingress-nginx-dmz1-internet"

	2.6) Cambiar el nombre de los clusterRole y clusterRoleBinding (hay 2 de cada uno). 

		- Cambie el nombre de cada uno (agregue-<capa-exposición> según corresponda)
		- Reemplace por el nuevo nombre en donde se referencien dentro del archivo

		
	2.7) Modificar el valor del argumento --ingress-class=nginx en el Deployment dentro de cada archivo.
			
		- En los archivos para Red-Interna y Desarrollo no cambiarlo, ya que mantendrán el ingressClass por defecto.
		- Debe cambiar por --ingress-class=nginx-<capa-exposición> según corresponda
	
		OBS: Esto es para asociar el ingress-class con el ingress-controller respectivo para cada capa de exposición.
		
		Modificar "--ingress-class=nginx" por "--ingress-class=nginx-<capa-exposición>"
		Use la siguiente sintaxis: sed -i 's/--ingress-class=nginx/--ingress-class=nginx-<capa-exposición>/g' "nombre-archivo"
	
	2.8) Agregue nodeSelector al archivo para generar la afinidad de los Pods con los nodos Worker respectivos.
	
		En el "kind: Deployment" del archivo ya está el nodeSelector, por lo que solamente se debe agregar la etiqueta asignada a los workers respectivos en el paso 1.
		Agregar bajo la etiqueta "kubernetes.io/os: linux"
	
		Debiese quedar así (Etiqueta de ejemplo):
		
		  nodeSelector:
			kubernetes.io/os: linux
			nodegroup-type: ingress-<capa-exposición>
		  serviceAccountName: ingress-nginx


		A los 2 "kind: Job" llamados "ingress-nginx-admission-patch" e "ingress-nginx-admission-create" se les debe agregar lo siguiente:
		  
		  nodeSelector:
			nodegroup-type: ingress-dmz1-internet (cambiar por la etiqueta que corresponda)
		  

	2.9) Indique la cantidad de réplicas en cada caso:
	
		Entre las líneas "spec:" y "selector:" del "king: Deployment", agregue una nueva línea identada a la altura de "selector:" con:
			replicas: 2
		
		OBS: La instalación para dmz1-internet tiene 3 réplicas, todas las demás deben tener 2.
				

	2.10) Actualice el configmap dentro del archivo yaml:
				

		OBS: Para asegurarse de que los servicios de IBM API Connect tengan tiempo de iniciarse, esto permite
			aumentar los valores de proxy-read-timeout y proxy-send-timeout, que están en segundos, lo que se realiza 
			en el configmap del Ingress Controller.
				
		Agregue lo siguiente en el tag "data" en el ConfigMap dentro del archivo:
				
data:
  hsts-max-age: "31536000"
  keepalive: "32"
  log-format: '{ "@timestamp": "$time_iso8601", "@version": "1", "clientip": "$remote_addr",
    "tag": "ingress", "remote_user": "$remote_user", "bytes": $bytes_sent, "duration":
    $request_time, "status": $status, "request": "$request_uri", "urlpath": "$uri",
    "urlquery": "$args", "method": "$request_method", "referer": "$http_referer",
    "useragent": "$http_user_agent", "software": "nginx", "version": "$nginx_version",
    "host": "$host", "upstream": "$upstream_addr", "upstream-status": "$upstream_status"
    }'
  main-snippets: load_module "modules/ngx_stream_module.so"
  proxy-body-size: "0"
  proxy-buffering: "off"
  proxy-read-timeout: "300"
  proxy-send-timeout: "300"
  server-name-hash-bucket-size: "128"
  server-name-hash-max-size: "1024"
  server-tokens: "False"
  ssl-ciphers: HIGH:!aNULL:!MD5
  ssl-prefer-server-ciphers: "True"
  ssl-protocols: TLSv1.2,TLSv1.3
  use-http2: "true"
  worker-connections: "10240"
  worker-cpu-affinity: auto
  worker-processes: "1"
  worker-rlimit-nofile: "65536"
  worker-shutdown-timeout: 5m
		
		
	2.10) Instale el Ingress-Controller con el siguiente comando:
	
		OBS: Solo para Red Interna en Producción y para Desarrollo en No-Producción.
	
		kubectl apply -f deploy-ingress-nginx-<capa-exposición>.yaml
		
		NOTA: El Pod "pod/ingress-nginx-controller-5d6646c469-z7h49" puede no iniciar y quedar en estado "CrashLoopBackOff". 
		En este caso, si en el log del Pod hay un error del tipo 'Invalid IngressClass (Spec.Controller) value "nginx.org/ingress-controller". Should be "k8s.io/ingress-nginx"
		controller: nginx.org/ingress-controller #k8s.io/ingress-nginx', debe ajustar la linea "controller: nginx.org/ingress-controller #k8s.io/ingress-nginx" con el valor válido y volver a procesar el ingress-class y el deploy del Ingress Controller.
		
	2.11) Instale el Ingress-Controller con el siguiente comando:
	
		OBS: Para todas las capas de exposición distintas a Red Interna en Producción y Desarrollo en No-Producción.
	
		kubectl apply --recursive -f deploy-ingress-nginx-<capa-exposición>.yaml

		La diferencia es que para los Ingress-Controller adicionales se agrega el parámetro --recursive al ejecutar el comando.
		
		
	2.12) Verifique la instalación:
	
        - Para ver todos los objetos que se han creado para cada Ingress-Controller, ejecute: kubectl -n <namespace> get all

	2.13) Finalmente, cuando cree un Ingress para permitir la exposición de un servicio por un Ingress-Controller específico, 
		debe agregar el tag ingressClassName indicando el ingress-class respectivo para dicho Ingress-Controller.
		
		El siguiente es un ejemplo:
		
		OBS: Desde la versión 1.18 de k8s, la línea que está comentada ya no funciona y da error al crear el ingress. Se debe usar ingressClassName.
		
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello-ingress-public
  namespace: test
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
#    kubernetes.io/ingress.class: nginx-public
spec:
  ingressClassName: nginx-public
  rules:
  - host: "hellov2.apic.lab"
    http:
      paths:
      - path: /v2
        pathType: Prefix
        backend:
          service:
            name: hello-v2-svc
            port:
              number: 80

		
	
##################################################
## FIN INSTALACIÓN MULTIPLES INGRESS CONTROLLER ##
##################################################